.model small
.stack 0100h
.data

	; Graphics
	
	cursor  db 11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,15,15,15,15,15,15,15,15,11
			db 11,15,15,15,15,15,15,15,15,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,11,11,11,15,15,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11
			
	hide_mycursor1   db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
					db 11,11,11,11,11,11,11,11,11,11
		
	
	
	duck db 00,00,04,04,04,04,04,00,00 ;09
		db 00,04,04,04,04,04,04,04,00
		db 04,04,04,04,04,04,04,04,04
		db 04,04,04,04,04,04,04,04,04
		db 00,04,04,04,04,04,04,04,00
		db 00,00,04,04,04,04,04,00,00 ;06

	hide_duck db 00,00,00,00,00,00,00,00,00 ;09
			db 00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,00,00,00 ;06
		   
	myduck1 db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 ; 25
			db 11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,02,02,02,11,11,11,11,11,11,11,11,11,11,11
			db 11,08,11,11,11,11,11,11,11,11,11,15,11,15,11,11,11,11,11,11,11,11,11,08,11
			db 11,08,08,11,11,11,11,11,11,11,11,02,11,02,11,11,11,11,11,11,11,11,08,08,11
			db 11,08,08,08,11,11,11,11,11,11,11,02,02,02,11,11,11,11,11,11,11,08,08,08,11
			db 11,11,08,08,08,11,11,11,11,11,11,11,02,11,11,11,11,11,11,11,08,08,08,11,11
			db 11,11,08,08,08,08,11,11,11,11,11,08,08,08,11,11,11,11,11,08,08,08,08,11,11
			db 11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11
			db 11,11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11,11
			db 11,11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11,11
			db 11,11,11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11,11,11
			db 11,11,11,11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11,11,11,11
			db 11,11,11,11,11,11,08,08,08,08,08,08,08,08,08,08,08,08,08,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,08,08,08,08,08,08,08,08,08,08,08,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,08,08,08,08,08,08,08,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,08,08,08,08,08,08,08,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,08,08,08,08,08,08,08,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,08,08,08,08,08,08,08,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,08,08,08,08,08,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,14,08,08,08,14,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,14,14,14,08,14,14,14,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,14,14,14,11,14,14,14,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 ; 25
	
	hide_myduck1 db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 ; 25
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
				db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 ; 25
	
		 
			
	myduck2 db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 ;33
			db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,14,00
			db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,14,14,14,00
			db 08,00,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,14,14,14,14,00
			db 08,08,00,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,02,02,02,14,14,14,14,14,00
			db 00,08,08,00,08,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,02,15,02,02,14,14,14,14,00,00
			db 00,00,08,08,00,08,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,02,02,15,15,15,02,14,14,14,00,00,00
			db 00,00,08,08,00,08,08,08,08,00,00,00,00,00,00,00,00,00,00,00,00,02,02,15,00,15,02,14,00,00,00,00,00
			db 00,00,00,08,00,08,08,08,08,08,00,00,00,00,00,00,00,00,00,00,02,02,02,15,15,15,02,00,00,00,00,00,00
			db 00,00,00,08,00,08,08,08,08,08,00,00,00,00,00,00,00,00,00,00,02,02,02,02,15,02,02,00,00,00,00,00,00
			db 00,00,00,00,00,08,08,08,08,08,08,00,00,00,00,00,00,00,00,02,02,02,02,02,02,02,00,00,00,00,00,00,00
			db 00,00,00,00,08,00,08,08,08,08,08,08,00,00,00,00,00,00,02,02,02,02,02,02,02,00,00,00,00,00,00,00,00
			db 00,00,00,00,08,00,08,08,08,08,08,08,08,00,00,00,00,02,02,02,02,02,02,02,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,02,02,02,02,02,02,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,02,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,02,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,00,00,00,00,00
			db 00,00,00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,00,08,08,08,08,08,08,00,00,00,00,00
			db 00,00,08,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,08,08,08,08,08,08,00,00,00,00
			db 00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,08,08,08,08,08,08,08,00,00 ;18
			db 00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,00,00,08,08,00,08,08,08,08,08,08,08,00
			db 00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,08,08,00,08,08,08,08,08,00,00
			db 00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,08,08,08,00,00,00,00,08,00,08,08,00,08,08,08,00,00,00
			db 00,00,00,00,08,08,08,08,08,08,08,08,08,08,08,08,00,00,00,00,00,00,00,08,00,08,08,00,08,00,00,00,00
			db 00,00,00,00,00,08,08,08,08,08,08,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,00,14,14,08,08,08,08,08,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,14,14,14,00,14,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,00,14,14,14,00,14,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,14,14,14,00,00,14,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
			db 00,00,00,14,00,14,00,14,14,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
			db 00,00,00,00,00,00,00,14,00,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
			db 00,00,00,00,00,00,00,14,00,14,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 ; 33
	
	
hide_myduck2 db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 ; 33
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
	
	
	
	
	MenuGraphics    db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,00,00,00,00,00,00,00,00  
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,00,00,00,00,00,00 
					db 00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,06,00,00,00,00,00,00,00 				
					db 00,00,00,00,00,00,06,06,06,06,15,15,06,06,06,15,15,06,06,06,06,00,00,00,00,00,00 
					db 00,00,00,00,00,00,06,06,06,15,15,15,15,06,15,15,15,15,06,06,06,00,00,00,00,00,00 
					db 00,00,00,00,00,00,06,06,06,15,15,00,15,06,15,00,15,15,06,06,06,00,00,00,00,00,00 
					db 00,00,00,00,00,00,06,06,06,06,15,15,15,06,15,15,15,06,06,06,06,00,00,00,00,00,00 
					db 00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,02,00,00 
					db 00,00,00,00,00,00,06,06,06,15,15,15,15,00,15,15,15,15,06,06,06,02,02,02,14,02,00 
					db 00,00,00,00,00,00,00,06,15,15,15,15,15,00,15,15,15,15,15,06,00,02,00,02,14,14,14 
					db 00,00,00,00,00,00,00,00,15,15,15,15,15,00,15,15,15,15,15,00,00,02,02,02,14,14,14
					db 00,00,00,00,00,00,00,00,00,15,15,15,00,00,00,15,15,15,00,00,00,06,02,02,02,00,00 
					db 00,00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,00,00,00,06,06,02,02,00,00 
					db 00,00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,00,00,06,06,06,02,02,00,00 
					db 00,00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,00,06,06,06,06,06,02,02,00 
					db 00,00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,02,02,00 
					db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,00,00,02,02,02,02,00 
					db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,00,00,00,02,02,02,08,00 
					db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,00,00,00,02,02,08,08,00 
					db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,00,00,00,02,02,08,08,00 
					db 00,00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,00,00,00,02,02,08,08,00 
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08 
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08
					db 00,00,00,00,00,00,00,06,06,06,06,06,06,06,06,06,06,06,06,06,00,02,02,08,08,08,08
					
	
	Tree 	db 11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11 ; 27
			db 11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11
			db 11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11
			db 11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11
			db 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11
			db 10,10,10,10,10,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
			db 10,10,10,10,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
			db 10,10,06,10,10,06,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
			db 10,06,10,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
			db 10,06,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,06,10,10,10,10,10,10
			db 10,10,06,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,06,10,10,10,10,10
			db 10,10,10,06,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,10,10,10,06,10
			db 10,10,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,06,06,06,10,10
			db 11,10,10,10,10,06,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,10,10,10,10,10,11
			db 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,10,10,10,10,10,10,11
			db 11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,06,10,10,10,10,10,11,11,11
			db 11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,06,10,10,10,10,11,11,11,11,11
			db 11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11
			db 11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11
			db 11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11

			db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11,11 ; 36
			db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11
			;db 11,11,11,11,11,11,11,06,06,06,06,06,06,06,06,06,06,06,06,11,11,11,11,11,11,11,11 ; 50
		
			
			
			
	Grass   db 02,11,11,11,11,11,11,11,11,11,02,02 ; 12
			db 11,02,02,11,11,11,11,11,11,02,11,11
			db 11,02,02,11,11,11,11,11,02,02,11,11
			db 11,02,02,11,11,11,11,11,02,02,11,11
			db 11,02,02,02,02,11,11,02,02,02,11,11
			db 11,11,02,02,02,11,11,02,02,11,11,11
			db 11,11,02,02,02,11,02,02,02,11,11,11
			db 11,11,02,02,02,02,02,02,02,11,11,11
			db 11,11,02,02,02,02,02,02,11,11,11,11 ; 9
			
			
			
		
	
	; ------------------------------------------------ GAME LOGO ---------------------------------------------------------------------;
	
					  
	D_Logo  		db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
					db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
					
					
					
	U_Logo  		db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 ;23
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00 
					db 00,04,04,04,04,04,04,04,04,00,00,00,00,00,04,04,04,04,04,04,04,04,00
					db 00,04,04,04,04,04,04,04,04,04,00,00,00,04,04,04,04,04,04,04,04,04,00 
					db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
					db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
					db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
					
					

	 C_Logo      db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
				 db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
				 db 04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04 
				 db 04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04 
				 db 04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04 
				 db 04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04 
				 db 04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04 
				 db 04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
				 db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
				 
				 
				 
	K_Logo       db 00,04,04,04,04,04,04,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00 ;23
				 db 00,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00
				 db 00,04,04,04,04,04,04,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00 ;23
				 
				 
				   
				 
	S_Logo       db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04 
				 db 04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04 
				 db 00,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04,04 
				 db 00,00,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,00,04 
				 db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00,00 
				 db 00,00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00 
				 db 00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 
				 db 00,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
				 db 00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04,00,00 
				 db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04,00 
				 db 04,00,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04 
				 db 04,04,00,00,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04 
				 db 04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04 
				 db 04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,04,04,04 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 ;23
				 
				  

	H_Logo       db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 ;23
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 ;23
				 
				 

	O_Logo       db 00,00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00 ;23
				 db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 
				 db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,04,04,04,04,04,04,04,04,00,00,00,00,00,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,00,00,00,00,00,00,00,00,00,00,00,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,00,00,00,00,00,00,00,00,00,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,00,00,00,00,00,04,04,04,04,04,04,04,04,00 
				 db 00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00 
				 db 00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00 
				 db 00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00 
				 db 00,00,00,00,00,04,04,04,04,04,04,04,04,04,04,04,04,04,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00 ;23
				 
				 

	T_Logo       db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 ;23
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,04,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 
				 db 00,00,00,00,00,00,00,00,04,04,04,04,04,04,04,00,00,00,00,00,00,00,00 ;23
		
		
				
			
	; Colors
	bgColor db 0B0h
	BarColor db 6Dh
	game_bgColor db 00h
	color db 00h
	
	; File handling 
	buffer db 6 dup(?)
	;buffer dw 0, '$'
	;buffers db 0, '$'
	;buffers db '0'
	;end_buffer db '$'
	attribute db 2
	filename db "textfile.txt", 0
	Filehandler dw 0
	filename2 db "ss.txt", 0
	temp_byte db "$"
	user_exits dw 0
	empty_scores db "000"
	
	user_score_buffer db 15 dup ("$"), 0
	buffer_name db 100 dup ("$"), 0
	
	; Loop Variables
	i dw 0
	j dw 0
	k dw 0
	
	; Game Variables
	lives dw 0
	level dw 0
	score dw 0
	collisions dw 0
	collisions2 dw 0
	ducks_passed dw 0
	bullets dw 0
	
	; Cursor Variables
	cursor_x dw 0
	cursor_y dw 0
	c_xDirection dw 0
	c_yDirection dw 0

	
	;Ball Variables
	xPos dw 30
	yPos dw 30
	xi dw 0
	xf dw 0
	yi dw 0
	yf dw 0
	xDirection dw 0
	yDirection dw 0	
	
	; Ball 2 Variables
	xPos2 dw 70
	yPos2 dw 30
	xi2 dw 0
	xf2 dw 0
	yi2 dw 0
	yf2 dw 0
	xDirection2 dw 0
	yDirection2 dw 0	
			
	
	; Variables
	InitialStack equ 0100h
	Retstore dw 0
	PauseFlag dw 0
	MenuFlag dw 0
	AInputkey dw 0
	Mouse_X dw 0
	Mouse_y dw 0
	ceiling dw 0
	rand_num db 0
	UpperLimit db 0
	lowerLimit db 0
	Beep_Type dw 0
	duck_missed1 dw 0
	duck_missed2 dw 0
	level_flag dw 0
	delay_count dw 0
	delay_flag dw 0
	loop_count dw 0
	name_flag dw 0
	total_bytes_stored dw 0
	
	; Level 2 Variables
	duck1_flag dw 0
	duck2_flag dw 0
	
	
	; Input Text Variables
	UsernameStr db "$$$$$$$$$"
	
	; Menu Variables
	Welcome db "Welcome to Duck Shooter!$"
	DevelopedBy db "By 22I-0472$"
	EnterNamePrompt db "Enter your Name :$"
	GameName db "Duck Shooter!$"
	Option1 db "New Game$"
	Option2 db "Resume$"
	Option3 db "Instructions$"
	Option4 db "HighScores$"
	Option5 db "Exit$"
	Option6 db "Restart$"
	Option7 db "Select Level$"
	Option8 db "Back$"
	Option9 db "Next Level$"
	greet_user db "Welcome $"
	score_prompt db "Score: $"
	bullets_prompt db "Bullets: $"
	pause_prompt db "Game Paused$"
	gameover_prompt db "Game Over$"
	youlost_prompt db "You Lost$"
	youwon_prompt db "You Won$"
	missed_ducks db "You Didn't Shoot All Ducks$"
	zero_bullets db "You Ran out of Bullets$"
	shot_all db "You Successfully Shot all Ducks$"
	lives_prompt db "Ducks: $"
	highscore_prompt db "High Score$"
	highscore_prompt2 db "Player High Score$"
	curr_highscore_prompt db "High Score Level 1: $"
	curr_highscore_prompt2 db "High Score Level 2: $"
	curr_highscore_prompt3 db "High Score Level 3: $"
	round1_prompt db "Round 1$"
	round2_prompt db "Round 2$"
	round3_prompt db "Round 3$"
	level1_prompt db "Level 1$"
	level2_prompt db "Level 2$"
	level3_prompt db "Level 3$"
	level_selection db "Level Selection$"
	oneInChamber_prompt db "One in the Chamber$"
	user_highscore_prompt db "Player Highscores$"
	highscore_level_prompt db "Levels : 1 2 3$"
	
	; Instructions Variables
	Instructions_prompt db"Instructions$"
	instruct1_prompt db "Use Arrow Keys to move Cursor and Space bar to Shoot.$"
	instruct2_prompt db "Use Spacebar Keys to shoot the ducks.$"
	instruct3_prompt db "You have limited time to shoot in each  level.$"
	instruct4_prompt db "Level 1: 1 duck per round with total 3  Bullets$"
	instruct5_prompt db "Level 2: 2 ducks per round with total 6 Bullets and faster ducks.$"
	instruct6_prompt db "Level 3: 6 faster Ducks, 1 Bullet. Hit  a duck to gain another Bullet.$"
	enterKey_prompt db "Press any key to Exit.$"
	select_level_prompt db "Select a Level to Play$"
	
	
	LevelOp1 db "Level 1$"
	LevelOp2 db "Level 2$"
	MenuOp db "Menu$"
	
	Fin db "    $"
	Fou db "===>$"


	UserName db 20 dup("$")
	Decision db 1
	Selected db 1

	
	
	; checker 
	digitCount db 0 
	anotherCounter db 0
	enteredNumber dw 0
	temp1 dw 0
	counter db 0
	inputStr db "Enter any number: ","$"
	outputStr db "Number is: ","$"
	w db 0
	
	

.code
	mov ax, @data
    mov ds, ax

main proc
	;video mode (graphic)
	mov ah, 0
	mov al, 13h
	int 10h
	
	call check_file_empty
	
	title_page::
	call TitlePage
	
	Setup::
	call MenuScreen
	call OptionSelected
	
	Reset::
	call initializeGame
	
	call startGame
	
	Reset2::
	call initializeGame2
	
	call startGame2
	
	Reset3::
	call initializeGame3
	
	call startGame3
	
	
	;title_page::
	;Setup::
	;Reset::
	;Reset2::
	;Reset3::
	


	Return::
		mov ah, 4ch
		int 21h
main endp


check_file_empty proc

	push ax
	push bx
	push CX
	push dx

	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 3
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	.if (buffer[0] == 00 && buffer[1] == 00 && buffer[2] == 00)
		
		mov buffer[0], 30h
		mov buffer[1], 30h
		mov buffer[2], 30h
		
		; Set file pointer to the beginning of the file
		mov ah, 42h
		mov al, 2 ; Move file pointer to beginning
		mov bx, Filehandler
		mov cx, 0 ; Offset from beginning
		mov dx, 0
		int 21h
		
		mov ah, 40H
		mov bx, Filehandler
		mov cx, 3
		mov dx, offset buffer
		int 21h

		
	.endif
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	

	pop dx
	pop cx
	pop bx
	pop ax

ret
check_file_empty endp

find_user proc

	push ax
	push bx
	push CX
	push dx
	
	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 101
	mov dx, offset buffer_name
	mov bx, Filehandler
	int 21h
	
	
	mov bx, 0
	
	.while bx < 101 && buffer_name[bx] != '$'
		
		mov dl, buffer_name[bx]
		
		.if ! (dl >= 30h && dl <= 39h || dl == ',')
			
			cmp dl, UserName[0]
			jne continue_loop
			
			mov si, 0 ; for Username
			mov di, bx ; for Stored name
			mov loop_count, 0
			
			.while loop_count < 15 && UserName[si] != '$'
				
				mov al, UserName[si]
				cmp al, buffer_name[di]
				jne continue_loop
				
				inc si
				inc di
				inc loop_count
			.endw
			
			; user exists
			mov user_exits, 1
			
			continue_loop:
		
		.endif
		
		
		inc bx	
	.endw
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax

ret
find_user endp

user_highscore_page proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	;mov dl, 15
	mov dl, 11
	int 10h
	;lea dx, highscore_prompt
	lea dx, user_highscore_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 7
	mov dl, 4
	int 10h
	lea dx, highscore_level_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 10
	mov dl, 4
	int 10h
	
	call display_user_score
	
	mov ah, 02h
	mov dh, 23
	mov dl, 8
	int 10h
	lea dx, enterKey_prompt
	mov ah, 09h
	int 21h
	
	; press any button to exit
	mov ah, 00h
	int 16h

ret
user_highscore_page endp

update_user_score1 proc

	push ax
	push bx
	push CX
	push dx
	
	; start code
	mov Filehandler, 0
	mov total_bytes_stored, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 101
	mov dx, offset buffer_name
	mov bx, Filehandler
	int 21h
	
	
	mov bx, 0
	
	.while bx < 101 && buffer_name[bx] != '$'
		
		mov dl, buffer_name[bx]
		
		.if ! (dl >= 30h && dl <= 39h || dl == ',')
			
			cmp dl, UserName[0]
			jne continue_loop
			
			mov si, 0 ; for Username
			mov di, bx ; for Stored name
			mov loop_count, 0
			
			.while loop_count < 15 && UserName[si] != '$'
				
				mov al, UserName[si]
				cmp al, buffer_name[di]
				jne continue_loop
				
				inc si
				inc di
				inc loop_count
			.endw
			
			; di contains index of score of UserName	
			mov al, buffer_name[di] ; level 1
			mov ah, 0
			sub al, '0'
			
			cmp score, ax
			jbe continue_loop
			
			mov ax, di
			mov cx, score
			
			mov buffer_name[di], cl
			add buffer_name[di], '0'
			
			mov di, ax
			
			continue_loop:
		
		.endif
		
		
		inc bx	
		inc total_bytes_stored
	.endw


	call ClearRegisters
	
	; Set file pointer to the beginning of the file
	mov ah, 42h
	mov al, 0 ; Move file pointer to beginning
	mov bx, Filehandler
	mov cx, 0 ; Offset from beginning
	mov dx, 0
	int 21h
	
	mov cx, total_bytes_stored
	mov ah, 40H
	mov bx, Filehandler
	;mov cx, 15
	mov dx, offset buffer_name
	int 21h
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_user_score1 endp

update_user_score2 proc

	push ax
	push bx
	push CX
	push dx
	
	; start code
	mov Filehandler, 0
	mov total_bytes_stored, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 101
	mov dx, offset buffer_name
	mov bx, Filehandler
	int 21h
	
	
	mov bx, 0
	
	.while bx < 101 && buffer_name[bx] != '$'
		
		mov dl, buffer_name[bx]
		
		.if ! (dl >= 30h && dl <= 39h || dl == ',')
			
			cmp dl, UserName[0]
			jne continue_loop
			
			mov si, 0 ; for Username
			mov di, bx ; for Stored name
			mov loop_count, 0
			
			.while loop_count < 15 && UserName[si] != '$'
				
				mov al, UserName[si]
				cmp al, buffer_name[di]
				jne continue_loop
				
				inc si
				inc di
				inc loop_count
			.endw
			
			; di contains index of score of UserName
			add di, 1
			
			mov ax, 0
			mov al, buffer_name[di] ; level 1
			mov ah, 0
			sub al, '0'
			
			cmp score, ax
			jbe continue_loop
			
			mov cx, score
			
			mov buffer_name[di], cl
			add buffer_name[di], '0'
			
			sub di, 1
			
			continue_loop:
		
		.endif
		
		
		inc bx	
		inc total_bytes_stored
	.endw


	call ClearRegisters
	
	; Set file pointer to the beginning of the file
	mov ah, 42h
	mov al, 0 ; Move file pointer to beginning
	mov bx, Filehandler
	mov cx, 0 ; Offset from beginning
	mov dx, 0
	int 21h
	
	mov cx, total_bytes_stored
	mov ah, 40H
	mov bx, Filehandler
	;mov cx, 15
	mov dx, offset buffer_name
	int 21h
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_user_score2 endp

update_user_score3 proc

	push ax
	push bx
	push CX
	push dx
	
	; start code
	mov Filehandler, 0
	mov total_bytes_stored, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 101
	mov dx, offset buffer_name
	mov bx, Filehandler
	int 21h
	
	
	mov bx, 0
	
	.while bx < 101 && buffer_name[bx] != '$'
		
		mov dl, buffer_name[bx]
		
		.if ! (dl >= 30h && dl <= 39h || dl == ',')
			
			cmp dl, UserName[0]
			jne continue_loop
			
			mov si, 0 ; for Username
			mov di, bx ; for Stored name
			mov loop_count, 0
			
			.while loop_count < 15 && UserName[si] != '$'
				
				mov al, UserName[si]
				cmp al, buffer_name[di]
				jne continue_loop
				
				inc si
				inc di
				inc loop_count
			.endw
			
			; di contains index of score of UserName	
			add di, 2
			
			mov al, buffer_name[di] ; level 1
			mov ah, 0
			sub al, '0'
			
			cmp score, ax
			jbe continue_loop
			
			mov cx, score
			
			mov buffer_name[di], cl
			add buffer_name[di], '0'
			
			sub di, 2
			
			continue_loop:
		
		.endif
		
		
		inc bx	
		inc total_bytes_stored
	.endw


	call ClearRegisters
	
	; Set file pointer to the beginning of the file
	mov ah, 42h
	mov al, 0 ; Move file pointer to beginning
	mov bx, Filehandler
	mov cx, 0 ; Offset from beginning
	mov dx, 0
	int 21h
	
	mov cx, total_bytes_stored
	mov ah, 40H
	mov bx, Filehandler
	;mov cx, 15
	mov dx, offset buffer_name
	int 21h
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_user_score3 endp

get_userScore_buffer proc

	push ax
	push bx
	push CX
	push dx
	
	call ClearRegisters
	
	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	
	mov bx, 0
	.while bx < 20 && UserName[bx] != '$'
	
		mov al, UserName[bx]
		mov user_score_buffer[bx], al
		
		inc bx
	.endw
	
	; getting index
	mov user_score_buffer[bx], '0'
	mov user_score_buffer[bx + 1], '0'
	mov user_score_buffer[bx + 2], '0'
	mov user_score_buffer[bx + 3], ','
	
	
	;mov cx,0
	;mov dx, 0
	;mov ah,42h
	;mov al,2 ; 0 beginning of file, 2 end of file
	;int 21h
	
	mov loop_count, bx
	
	; Set file pointer to the beginning of the file
	mov ah, 42h
	mov al, 2 ; Move file pointer to beginning
	mov bx, Filehandler
	mov cx, 0 ; Offset from beginning
	mov dx, 0
	int 21h
	
	mov cx, loop_count
	add cx, 4
	mov ah, 40H
	mov bx, Filehandler
	;mov cx, 15
	mov dx, offset user_score_buffer
	int 21h
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax

ret
get_userScore_buffer endp

display_user_score proc

	push ax
	push bx
	push CX
	push dx
	
	
	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename2
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 101
	mov dx, offset buffer_name
	mov bx, Filehandler
	int 21h
	
	mov loop_count, 0
	mov bx, loop_count
	mov name_flag, 0
	
	.while bx < 101 && buffer_name[bx] != '$'
		
		mov dl, buffer_name[bx]
		
		.if (dl >= 30h && dl <= 39h)
			
			.if (name_flag == 0)
				
				push dx
				mov dl, ':'
				mov ah, 2
				int 21h
				pop dx
				
				mov name_flag, 1
			
			.endif
		
			push dx
			mov dl, ' '
			mov ah, 2
			int 21h
			pop dx
			
			mov ah, 2
			int 21h
			
		.elseif (dl == ',')
			
			push dx
			mov dl, 0Ah
			mov ah, 2
			int 21h
			
			mov dl, 0Ah
			mov ah, 2
			int 21h
			
			mov dl, ' '
			mov ah, 2
			int 21h
			
			mov dl, ' '
			mov ah, 2
			int 21h
			
			mov dl, ' '
			mov ah, 2
			int 21h
			
			mov dl, ' '
			mov ah, 2
			int 21h
			
			pop dx
			
			mov name_flag, 0
		
		.else
			mov ah, 2
			int 21h
		
		.endif
		
		
		inc bx	
	.endw
		
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax


ret
display_user_score endp



get_random_delay proc

	call get_random_chance
	
	.if (rand_num == 1)
		call Delay5
	.else 
		call Delay
	.endif

ret
get_random_delay endp

startGame3 proc
	
	;call ClearRegisters	
	
	mov i, 0
	mov j, 10000
	l1:
		;call gameBackground
	
		mov cx, i
		cmp cx, j
		jae end_l1_sg
		
		
		call check_duck_passing3
		
		mov si, offset hide_mycursor1
		call draw_cursor
		
		call InputControl3
		
		.if (duck2_flag == 0)
		
			mov si, offset myduck1
			mov cx, xPos2
			mov dx, yPos2
			call makeBall2
			
			call setDirection2
			
			mov ax, xDirection2
			add xPos2, ax
			
			mov ax, yDirection2
			add yPos2, ax
		.endif

		.if (duck1_flag == 0)
			mov si, offset myduck1
			call makeBall
			
			call setDirection
			
			mov ax, xDirection
			add xPos, ax
			
			mov ax, yDirection
			add yPos, ax
		.endif 
		
		mov si, offset Cursor
		call draw_cursor
		
		call set_gameStats
		
		
		; check collisions, remove if using reset_duck1 and 2
		cmp collisions, 10
		jl continue_game4
		mov ceiling, 320
		
		
		continue_game4:
		
		.if (duck1_flag == 1 && duck2_flag == 1)
			mov duck1_flag, 0
			mov duck2_flag, 0
			
			; Reset Collisions
			mov collisions, 0
			mov ceiling, 250
			
		.endif

		call get_random_delay
		;call Delay5
		inc i
		jmp l1
		
	
	end_l1_sg:

ret
startGame3 endp

initializeGame3 proc

	mov si, offset hide_duck
	mov cx, xPos
	mov dx, yPos
	call makeBall
	
	mov si, offset hide_duck
	mov cx, xPos2
	mov dx, yPos2
	call makeBall
	
	;mov xPos, 151
	;mov yPos, 30
	mov xPos2, 150
	mov yPos2, 30
	;call get_random_coordinates
	;mov ax, xPos
	;mov bx, yPos
	;mov xPos2, ax
	;mov yPos2, bx
	call get_random_coordinates
	;call get_random_coordinates2
	
	mov score, 0
	mov lives, 6
	mov ducks_passed, 6
	mov duck_missed1, 0
	mov duck_missed2, 0
	mov collisions, 0
	;mov level_flag, 2
	
	mov duck1_flag, 0
	mov duck2_flag, 0
	
	mov ceiling, 250
	
	mov xDirection, 1
	mov yDirection, 1
	mov xDirection2, 1
	mov yDirection2, 1
	neg xDirection2
	
	; initialize position
	mov cursor_y, 80
	mov cursor_x, 150
	
	mov bullets, 1
	
	call display_level3
	;call display_round1
	call gameBackground

ret
initializeGame3 endp



selectLevel_page proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	;call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 12
	int 10h
	lea dx, level_selection
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 8
	mov dl, 8
	int 10h
	lea dx, select_level_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, level1_prompt
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, level2_prompt
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 10
	int 10h
	lea dx, level3_prompt
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 20
	mov dl, 10
	int 10h
	lea dx, Option8
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection5
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 4
		mov Decision,al
		.endif
		call Selection5
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 5)
			mov al, 1
			mov Decision, al
			.endif
			call Selection5
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected8

ret
selectLevel_page endp

instructions_page proc
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	;call DisplayUserName
	;call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 13
	int 10h
	lea dx, Instructions_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 1
	int 10h
	lea dx, instruct1_prompt
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 10
	mov dl, 1
	int 10h
	lea dx, instruct3_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 13
	mov dl, 1
	int 10h
	lea dx, instruct4_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 16
	mov dl, 1
	int 10h
	lea dx, instruct5_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 19
	mov dl, 1
	int 10h
	lea dx, instruct6_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 23
	mov dl, 8
	int 10h
	lea dx, enterKey_prompt
	mov ah, 09h
	int 21h
	
	; press any button to exit
	mov ah, 00h
	int 16h
	
	
ret
instructions_page endp

display_level2 proc

	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 16
	int 10h
	lea dx, level2_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3

ret
display_level2 endp

display_level1 proc

	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 16
	int 10h
	lea dx, level1_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3

ret
display_level1 endp

display_roundscreen proc

	; display round
	mov ax, lives
	cmp ax, 1
	je disp_round3
	
	cmp ax, 2
	je disp_round2
	
	jmp end_disps
	
	disp_round3:
		call display_round3
		jmp end_disps
	
	disp_round2:
		call display_round2
	
	end_disps:
	
	; display round

ret
display_roundscreen endp

display_round1 proc
	
	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 16
	int 10h
	lea dx, round1_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3
	
	;call gameBackground
	
ret
display_round1 endp

display_round2 proc

	push ax
	push bx
	push CX
	push dx
	
	call ClearRegisters
	
	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 16
	int 10h
	lea dx, round2_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3
	
	call gameBackground
	
	pop dx
	pop CX
	pop bx
	pop ax
	
ret
display_round2 endp

display_round3 proc
	
	push ax
	push bx
	push CX
	push dx
	
	call ClearRegisters
	
	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 16
	int 10h
	lea dx, round3_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3
	
	call gameBackground
	
	pop dx
	pop CX
	pop bx
	pop ax
	
ret
display_round3 endp

display_level3 proc

	; Black BG
	mov ah, 06
	mov bh, 00
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	; Display prompt
	mov ah, 02h
	mov dh, 12
	mov dl, 10
	int 10h
	lea dx, oneInChamber_prompt
	mov ah, 9
	int 21h
	
	; Delay
	
	call Delay3

ret
display_level3 endp


startGame2 proc
	
	;call ClearRegisters	
	
	mov i, 0
	mov j, 10000
	l1:
		;call gameBackground
	
		mov cx, i
		cmp cx, j
		jae end_l1_sg
		
		
		call check_duck_passing2
		
		mov si, offset hide_mycursor1
		call draw_cursor
		
		call InputControl2
		
		.if (duck2_flag == 0)
		
			mov si, offset myduck1
			mov cx, xPos2
			mov dx, yPos2
			call makeBall2
			
			call setDirection2
			
			mov ax, xDirection2
			add xPos2, ax
			
			mov ax, yDirection2
			add yPos2, ax
		.endif

		.if (duck1_flag == 0)
			mov si, offset myduck1
			call makeBall
			
			call setDirection
			
			mov ax, xDirection
			add xPos, ax
			
			mov ax, yDirection
			add yPos, ax
		.endif 
		
		mov si, offset Cursor
		call draw_cursor
		
		call set_gameStats
		
		
		; check collisions, remove if using reset_duck1 and 2
		cmp collisions, 15
		jl continue_game4
		mov ceiling, 320
		
		
		continue_game4:
		
		.if (duck1_flag == 1 && duck2_flag == 1)
			mov duck1_flag, 0
			mov duck2_flag, 0
			
			; Reset Collisions
			mov collisions, 0
			mov ceiling, 250
			
			; Display Round
			mov ax, lives
			cmp ax, 2
			je disp_round3
			
			cmp ax, 4
			je disp_round2
			
			jmp end_disps
			
			disp_round3:
				call display_round3
				jmp end_disps
			
			disp_round2:
				call display_round2
			
			end_disps:
			
		.endif
		
		call Delay4
		inc i
		jmp l1
		
	
	end_l1_sg:

ret
startGame2 endp

initializeGame2 proc

	mov si, offset hide_duck
	mov cx, xPos
	mov dx, yPos
	call makeBall
	
	mov si, offset hide_duck
	mov cx, xPos2
	mov dx, yPos2
	call makeBall
	
	;mov xPos, 151
	;mov yPos, 30
	mov xPos2, 150
	mov yPos2, 30
	;call get_random_coordinates
	;mov ax, xPos
	;mov bx, yPos
	;mov xPos2, ax
	;mov yPos2, bx
	call get_random_coordinates
	;call get_random_coordinates2
	
	mov score, 0
	mov lives, 6
	mov ducks_passed, 6
	mov duck_missed1, 0
	mov duck_missed2, 0
	mov collisions, 0
	;mov level_flag, 2
	
	mov duck1_flag, 0
	mov duck2_flag, 0
	
	mov ceiling, 250
	
	mov xDirection, 1
	mov yDirection, 1
	mov xDirection2, 1
	mov yDirection2, 1
	neg xDirection2
	
	; initialize position
	mov cursor_y, 80
	mov cursor_x, 150
	
	mov bullets, 6
	
	call display_level2
	call display_round1
	call gameBackground

ret
initializeGame2 endp

sound_beep proc
        push ax
        push bx
        push cx
        push dx
		
		call ClearRegisters
		
        mov al, 182         ; Prepare the speaker for the
        out 43h, al 
        mov ax, 400         ; Frequency number (in decimal) for middle C

        out 42h, al         ; Output low byte
        mov al, ah          ; Output high byte
        out 42h, al 
        in  al, 61h         ; Turn on note (get value from port 61h)

        or  al, 00000011b   ; Set bits 1 and 0
        out 61h, al         ; Send new value
        mov bx, 2           ; Pause for duration of note
	Pause_1:
        mov cx, Beep_Type
	Pause_2:
        dec cx
        jne Pause_2
        dec bx
        jne Pause_1
        in  al, 61h         ; Turn off note (get value from port 61h)

        and al, 11111100b   ; Reset bits 1 and 0
        out 61h, al         ; Send new value

        pop dx
        pop cx
        pop bx
        pop ax
ret
sound_beep endp

highscore_page proc
	
	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, highscore_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 10
	mov dl, 5
	int 10h
	lea dx, curr_highscore_prompt
	mov ah, 09h
	int 21h
	
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; set cursor
	;mov ah, 02h
	;mov dh, 7
	;mov dl, 19
	;int 10h
	
	; read file
	mov ah, 3FH
	mov cx, 1
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dx, 0
	mov dl, buffer[0]
	mov ah, 2
	int 21h
	
	; Close file
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	
	; Level 2
	mov ah, 02h
	mov dh, 13
	mov dl, 5
	int 10h
	lea dx, curr_highscore_prompt2
	mov ah, 09h
	int 21h
	
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 2
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dx, 0
	mov dl, buffer[1]
	mov ah, 2
	int 21h
	
	; Close file
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	; Level 3
	mov ah, 02h
	mov dh, 16
	mov dl, 5
	int 10h
	lea dx, curr_highscore_prompt3
	mov ah, 09h
	int 21h
	
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 3
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dx, 0
	mov dl, buffer[2]
	mov ah, 2
	int 21h
	
	; Close file
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	mov ah, 02h
	mov dh, 23
	mov dl, 8
	int 10h
	lea dx, enterKey_prompt
	mov ah, 09h
	int 21h
	
	
	; press any button to exit
	mov ah, 00h
	int 16h

	comment @
	l1:
		mov ah, 00h
		int 16h
		cmp al, 13
		je exit_highscore
		jmp l1
		
	exit_highscore:
		;mov Decision, 3
		;jmp OptionSelected2
	@
	

ret
highscore_page endp

update_Highscore proc
	
	push ax
	push bx
	push CX
	push dx

	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 1
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[0]
	sub dl, 30h
	mov dh, 0
	
	cmp score, dx
	jbe no_update
	
	mov cx,0
	mov dx, 0
	mov ah,42h
	mov al,0 ; 0 beginning of file, 2 end of file
	int 21h
	
	mov bx, score
	add bx, 30h
	mov buffer[0], bl
	
	; write file ; This just writes the new data in the beginning of the textfile, does not overwrite previous data
	mov ah, 40H
	mov bx, Filehandler
	mov cx, 1
	mov dx, offset buffer
	int 21h
	
	
	no_update:
	

	

	
	; Close file
	close_ting:
	
	; read file
	mov ah, 3FH
	mov cx, 1
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[0]
	mov ah, 2
	int 21h
	
	mov dx, score
	mov ah, 2
	int 21h
	
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_Highscore endp

update_Highscore2 proc

	push ax
	push bx
	push CX
	push dx

	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 2
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[1]
	sub dl, 30h
	mov dh, 0
	
	cmp score, dx
	jbe no_update
	
	mov cx,0
	mov dx, 0
	mov ah,42h
	mov al,0 ; 0 beginning of file, 2 end of file
	int 21h
	
	mov bx, score
	add bx, 30h
	mov buffer[1], bl
	
	; write file ; This just writes the new data in the beginning of the textfile, does not overwrite previous data
	mov ah, 40H
	mov bx, Filehandler
	mov cx, 2
	mov dx, offset buffer
	int 21h
	
	
	no_update:
	
	; Close file
	close_ting:
	
	; read file
	mov ah, 3FH
	mov cx, 2
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[1]
	mov ah, 2
	int 21h
	
	mov dx, score
	add dx, '0'
	mov ah, 2
	int 21h
	
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_Highscore2 endp

update_Highscore3 proc

	push ax
	push bx
	push CX
	push dx

	; start code
	mov Filehandler, 0
	
	; open file
	mov ah, 3DH
	mov al, attribute ; 0 for reading, 1 for writing. 2 for both
	mov dx, offset filename
	int 21h
	mov Filehandler,ax
	
	; read file
	mov ah, 3FH
	mov cx, 3
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[2]
	sub dl, 30h
	mov dh, 0
	
	cmp score, dx
	jbe no_update
	
	mov cx,0
	mov dx, 0
	mov ah,42h
	mov al,0 ; 0 beginning of file, 2 end of file
	int 21h
	
	mov bx, score
	add bx, 30h
	mov buffer[2], bl
	
	; write file ; This just writes the new data in the beginning of the textfile, does not overwrite previous data
	mov ah, 40H
	mov bx, Filehandler
	mov cx, 3
	mov dx, offset buffer
	int 21h
	
	
	no_update:
	
	; Close file
	close_ting:
	
	; read file
	mov ah, 3FH
	mov cx, 3
	mov dx, offset buffer
	mov bx, Filehandler
	int 21h
	
	mov dl, buffer[2]
	mov ah, 2
	int 21h
	
	mov dx, score
	add dx, '0'
	mov ah, 2
	int 21h
	
	
	mov ah, 3Eh
	mov bx, filehandler
	int 21h
	
	
	pop dx
	pop cx
	pop bx
	pop ax
	

ret
update_Highscore3 endp



get_random_coordinates proc

	call ClearRegisters

	push ax
	mov ax, 0
	
	mov UpperLimit, 200
	mov lowerLimit, 30
	call RandomNumber
	mov al, rand_num
	mov xPos, ax
	
	mov UpperLimit, 70
	mov lowerLimit, 20
	call RandomNumber
	mov al, rand_num
	mov yPos, ax
	
	pop ax

ret 
get_random_coordinates endp

get_random_coordinates2 proc

	call ClearRegisters
	; Gives same xPos2 as xPos

	push ax
	mov ax, 0
	
	mov UpperLimit, 200
	mov lowerLimit, 30
	call RandomNumber
	mov al, rand_num
	mov xPos2, ax
	
	mov UpperLimit, 70
	mov lowerLimit, 20
	call RandomNumber
	mov al, rand_num
	mov yPos2, ax
	
	pop ax

ret 
get_random_coordinates2 endp

RandomNumber proc
	push cx
	push dx
	push ax
	
	mov ah , 00h
	int 1Ah
	mov ax, dx
	mov dx, 0
	mov ah, 0
	
	cmp UpperLimit , al
	ja Resume1
		mov cl , UpperLimit
		div cl
		mov al , ah
	Resume1:
	
	LR:
		mov si , 0
		cmp LowerLimit , al
		jb Resume2
			add al , UpperLimit
			mov si , 1
		Resume2:
	cmp si , 0
	jne LR

	mov rand_num, al
	pop ax
	pop dx
	pop cx
ret
RandomNumber endp

get_random_chance proc
	
	mov UpperLimit, 2
	mov lowerLimit, 0
	call RandomNumber

ret
get_random_chance endp

you_lost proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youlost_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 7
	int 10h
	;lea dx, missed_ducks
	mov dx, di
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection3
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 2
		mov Decision,al
		.endif
		call Selection3
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 3)
			mov al, 1
			mov Decision, al
			.endif
			call Selection3
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected3

ret
you_lost endp

you_lost2 proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youlost_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 7
	int 10h
	;lea dx, missed_ducks
	mov dx, di
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection3
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 2
		mov Decision,al
		.endif
		call Selection3
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 3)
			mov al, 1
			mov Decision, al
			.endif
			call Selection3
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected6

ret
you_lost2 endp

you_lost3 proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youlost_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 7
	int 10h
	;lea dx, missed_ducks
	mov dx, di
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection3
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 2
		mov Decision,al
		.endif
		call Selection3
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 3)
			mov al, 1
			mov Decision, al
			.endif
			call Selection3
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected9

ret
you_lost3 endp


you_won proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youwon_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 4
	int 10h
	lea dx, shot_all
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option9
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection4
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 3
		mov Decision,al
		.endif
		call Selection4
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 4)
			mov al, 1
			mov Decision, al
			.endif
			call Selection4
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected4

ret
you_won endp

you_won2 proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youwon_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 4
	int 10h
	lea dx, shot_all
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option9
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection4
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 3
		mov Decision,al
		.endif
		call Selection4
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 4)
			mov al, 1
			mov Decision, al
			.endif
			call Selection4
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected7

ret
you_won2 endp

you_won3 proc

	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	lea dx, gameover_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 7
	mov dl, 15
	int 10h
	lea dx, youwon_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 9
	mov dl, 4
	int 10h
	lea dx, shot_all
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, option6
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h

	
	mov Decision, 1
	call Selection3
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 2
		mov Decision,al
		.endif
		call Selection3
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 3)
			mov al, 1
			mov Decision, al
			.endif
			call Selection3
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
	
	call OptionSelected9

ret
you_won3 endp



reset_duck1 proc
	

	;mov xPos, 30
	;mov yPos, 30
	call get_random_coordinates
	
	
	mov collisions, 0
	mov ceiling, 250
	dec lives

ret
reset_duck1 endp

reset_duck2 proc
	
	push ax
	push bx

	mov xPos2, 150
	mov yPos2, 30
	;call get_random_coordinates
	;mov ax, xPos
	;mov bx, yPos
	;mov xPos2, ax
	;mov yPos2, bx
	
	mov collisions, 0
	mov ceiling, 250
	dec lives
	
	pop bx
	pop ax

ret
reset_duck2 endp

reset_duck3 proc

	push ax
	push bx

	;mov xPos, 30
	;mov yPos, 30
	call get_random_coordinates
	
	
	;mov collisions, 0
	;mov ceiling, 250
	dec lives
	
	pop bx
	pop ax


ret
reset_duck3 endp

reset_duck4 proc
	
	push ax
	push bx

	;mov xPos2, 150
	;mov yPos2, 30
	call get_random_coordinates2
	;mov ax, xPos
	;mov bx, yPos
	;mov xPos2, ax
	;mov yPos2, bx
	
	;mov collisions, 0
	;mov ceiling, 250
	dec lives
	
	pop bx
	pop ax

ret
reset_duck4 endp

check_duck_passing proc

		; if all ducks shot
		mov ax, score
		cmp ax, 3
		jl continue_game1
		
		call update_Highscore
		call update_user_score1
		call ClearRegisters
		;mov Decision, 3
		;jmp OptionSelected2
		call you_won
		
		
		continue_game1:
		
		; if ran out of bullets
		mov ax, bullets
		cmp ax, 0
		ja continue_game2
		
		call update_Highscore ; comment if update highscore only when game won
		call update_user_score1
		mov di, offset zero_bullets	
		call you_lost
		
		continue_game2:

		; if lives are finished
		mov ax, lives
		cmp ax, 0
		ja continue_game3
		
		call update_Highscore ; comment if update highscore only when game won
		call update_user_score1
		mov di, offset missed_ducks		
		call you_lost
		
		
		continue_game3:
		
		; check if duck is out of the window
		cmp xPos, 305
		jl continue_game4
		
		mov Beep_Type, 30000
		call sound_beep
		
		mov si, offset hide_myduck1
		call makeBall
		
		call reset_duck1
		dec ducks_passed
		;dec lives
		call display_roundscreen
	
		continue_game4:

ret
check_duck_passing endp

check_duck_passing2 proc

		; if all ducks shot
		mov ax, score
		cmp ax, 6
		jl continue_game1
		
		call update_Highscore2
		call update_user_score2
		call ClearRegisters
		;mov Decision, 3
		;jmp OptionSelected2
		call you_won2
		
		
		continue_game1:
		
		; if ran out of bullets
		mov ax, bullets
		cmp ax, 0
		ja continue_game2
		
		call update_Highscore2 ; comment if update highscore only when game won
		call update_user_score2
		mov di, offset zero_bullets	
		call you_lost2
		
		continue_game2:

		; if lives are finished
		mov ax, lives
		cmp ax, 0
		ja continue_game3
		
		call update_Highscore2 ; comment if update highscore only when game won
		call update_user_score2
		mov di, offset missed_ducks		
		call you_lost2
		
		
		continue_game3:
		
		; check if duck is out of the window
		cmp xPos, 305
		jl continue_game4
		
		mov Beep_Type, 30000
		call sound_beep
		
		mov si, offset hide_myduck1
		call makeBall
		
		call reset_duck3 ; replace with reset_duck1 to set collision to 0 if one duck flies off
		dec ducks_passed
		mov duck1_flag, 1
		;dec lives
	
		continue_game4:

		; check if duck is out of the window
		cmp xPos2, 305
		jl continue_game5
		
		mov Beep_Type, 30000
		call sound_beep
		
		mov si, offset hide_myduck1
		mov cx, xPos2
		mov dx, yPos2
		call makeBall2
		
		call reset_duck4 ; replace with reset_duck2 to set collision to 0 if one duck flies off
		dec ducks_passed
		mov duck2_flag, 1
		;dec lives
		
		continue_game5:

ret
check_duck_passing2 endp

check_duck_passing3 proc

		; if all ducks shot
		mov ax, score
		cmp ax, 6
		jl continue_game1
		
		call update_Highscore3
		call update_user_score3
		call ClearRegisters
		;mov Decision, 3
		;jmp OptionSelected2
		call you_won3
		
		
		continue_game1:
		
		; if ran out of bullets
		mov ax, bullets
		cmp ax, 0
		ja continue_game2
		
		call update_Highscore3 ; comment if update highscore only when game won
		call update_user_score3
		mov di, offset zero_bullets	
		call you_lost3
		
		continue_game2:

		; if lives are finished
		mov ax, lives
		cmp ax, 0
		ja continue_game3
		
		call update_Highscore3 ; comment if update highscore only when game won
		call update_user_score3
		mov di, offset missed_ducks		
		call you_lost3
		
		
		continue_game3:
		
		; check if duck is out of the window
		cmp xPos, 305
		jl continue_game4
		
		mov Beep_Type, 30000
		call sound_beep
		
		mov si, offset hide_myduck1
		call makeBall
		
		call reset_duck3 ; replace with reset_duck1 to set collision to 0 if one duck flies off
		dec ducks_passed
		mov duck1_flag, 1
		mov lives, 0
		;dec lives
	
		continue_game4:

		; check if duck is out of the window
		cmp xPos2, 305
		jl continue_game5
		
		mov Beep_Type, 30000
		call sound_beep
		
		mov si, offset hide_myduck1
		mov cx, xPos2
		mov dx, yPos2
		call makeBall2
		
		call reset_duck4 ; replace with reset_duck2 to set collision to 0 if one duck flies off
		dec ducks_passed
		mov duck2_flag, 1
		mov lives, 0
		;dec lives
		
		continue_game5:

ret
check_duck_passing3 endp


display_2bytes proc

	mov ah,02h
	;mov dh, 12
	;mov dl, 4
	int 10h

	mov counter, 0
	
	OUTPUT:
    mov dx, 0
	MOV AX, enteredNumber
	MOV Bx, 10
	L1:
        mov dx, 0
		CMP Ax, 0
		JE DISP
		DIV Bx
		MOV cx, dx
		PUSH CX
		inc counter
		MOV AH, 0
		JMP L1

DISP:
	CMP counter, 0
	JE exit_display2
	POP DX
	ADD DX, 48
	MOV AH, 02H
	INT 21H
	dec counter
	JMP DISP
	
	
	exit_display2:

ret
display_2bytes endp

hide_cursor proc

	comment @
	push ax
	push cx

	mov ah, 01h        ; Set cursor shape
    mov cx, 2000h      ; Start line 20, end line 0 (makes cursor invisible)
    int 10h            ; BIOS interrupt to set cursor shape
    
	pop cx
	pop ax
	@
	
	call ClearRegisters
	
	mov cx, cursor_x
	mov dx, cursor_y

	;mov si, offset duck	;draw 
	mov yi, dx
	add yi, bx
	mov yf, dx
	add yf, 10
	add yf, bx
	
	mov xi, cx
	add xi, ax	
	mov xf, cx
	add xf, 10
	add xf, ax
	
	call draw
	
	
	

ret
hide_cursor endp

check_hit proc
	
	push ax
	push bx
	
	; display
	mov cx, Mouse_X
	mov dh, 12
	mov dl, 4
	mov enteredNumber, cx
	call display_2bytes
	
	mov dh, 12
	mov dl, 10
	mov cx, xPos
	mov enteredNumber, cx
	call display_2bytes
	; display
	
	mov ax, xPos
	mov bx, xPos
	add bx, 25
	
	cmp Mouse_X, ax
	jg no_hit
	
	;jmp setUp
	
	cmp Mouse_X, bx
	jg no_hit
	
	;jmp setUp
	
	mov ax, yPos
	mov bx, yPos
	add bx, 25
	
	cmp Mouse_Y, ax
	jl no_hit
	
	cmp Mouse_Y, bx
	jg no_hit
	
	jmp title_page
	
	no_hit:
	
	pop bx
	pop ax
	
ret
check_hit endp

check_hit2 proc

	push ax
	push bx
	push cx

	mov ax, xPos
	mov bx, xPos
	add bx, 25
	mov cx, cursor_x
	add cx, 5
	
	.if ( cx >= ax )
		.if ( cx <= bx )
		
			mov ax, yPos
			mov bx, yPos
			add bx, 25
			mov cx, cursor_y
			add cx, 5
		
			.if ( cursor_y >= ax )
				.if ( cursor_y <= bx )
				
					mov Beep_Type, 1000
					call sound_beep
				
					mov si, offset hide_myduck1
					call makeBall
				
					inc score	
					; reset positions and stats
					call reset_duck1
					
					call display_roundscreen
					
				
				.endif
			.endif
		.endif
	.endif
	
	pop cx
	pop Bx
	pop ax

ret
check_hit2 endp

check_hit3 proc
	
	push ax
	push bx
	push cx

	mov ax, xPos
	mov bx, xPos
	add bx, 25
	mov cx, cursor_x
	add cx, 5
	
	.if ( cx >= ax )
		.if ( cx <= bx )
		
			mov ax, yPos
			mov bx, yPos
			add bx, 25
			mov cx, cursor_y
			add cx, 5
		
			.if ( cursor_y >= ax )
				.if ( cursor_y <= bx )
				
					mov Beep_Type, 1000
					call sound_beep
				
					mov si, offset hide_myduck1
					call makeBall
				
					inc score	
					; reset positions and stats
					mov duck1_flag, 1
					call reset_duck3
					
					jmp exit_hit
					
					
				
				.endif
			.endif
		.endif
	.endif
	
	mov ax, xPos2
	mov bx, xPos2
	add bx, 25
	mov cx, cursor_x
	add cx, 5
	
	.if ( cx >= ax )
		.if ( cx <= bx )
		
			mov ax, yPos2
			mov bx, yPos2
			add bx, 25
			mov cx, cursor_y
			add cx, 5
		
			.if ( cursor_y >= ax )
				.if ( cursor_y <= bx )
				
					mov Beep_Type, 1000
					call sound_beep
				
					mov si, offset hide_myduck1
					mov cx, xPos2
					mov dx, yPos2
					call makeBall2
				
					inc score	
					; reset positions and stats
					mov duck2_flag, 1
					call reset_duck4
					
					
				
				.endif
			.endif
		.endif
	.endif
	
	exit_hit:
	
	pop cx
	pop Bx
	pop ax
	
ret
check_hit3 endp

check_hit4 proc
	
	push ax
	push bx
	push cx

	mov ax, xPos
	mov bx, xPos
	add bx, 25
	mov cx, cursor_x
	add cx, 5
	
	.if ( cx >= ax )
		.if ( cx <= bx )
		
			mov ax, yPos
			mov bx, yPos
			add bx, 25
			mov cx, cursor_y
			add cx, 5
		
			.if ( cursor_y >= ax )
				.if ( cursor_y <= bx )
				
					mov Beep_Type, 1000
					call sound_beep
				
					mov si, offset hide_myduck1
					call makeBall
				
					inc score	
					inc bullets
					; reset positions and stats
					mov duck1_flag, 1
					call reset_duck3
					
					jmp exit_hit
					
					
				
				.endif
			.endif
		.endif
	.endif
	
	mov ax, xPos2
	mov bx, xPos2
	add bx, 25
	mov cx, cursor_x
	add cx, 5
	
	.if ( cx >= ax )
		.if ( cx <= bx )
		
			mov ax, yPos2
			mov bx, yPos2
			add bx, 25
			mov cx, cursor_y
			add cx, 5
		
			.if ( cursor_y >= ax )
				.if ( cursor_y <= bx )
				
					mov Beep_Type, 1000
					call sound_beep
				
					mov si, offset hide_myduck1
					mov cx, xPos2
					mov dx, yPos2
					call makeBall2
				
					inc score	
					inc bullets
					; reset positions and stats
					mov duck2_flag, 1
					call reset_duck4
					
					
				
				.endif
			.endif
		.endif
	.endif
	
	exit_hit:
	
	pop cx
	pop Bx
	pop ax
	
ret
check_hit4 endp


mouse_clicked proc

	mov Mouse_X, cx
	mov Mouse_y, dx
	
	; display
	mov cx, Mouse_X
	mov dh, 12
	mov dl, 4
	mov enteredNumber, cx
	call display_2bytes
	
	mov dh, 12
	mov dl, 10
	mov cx, xPos
	mov enteredNumber, cx
	call display_2bytes
	; display
		
	
	;Display or Use Coordinate Here
	;mov ah, 02h
	;int 21h
		
	; Wait for the mouse button to be released
    ;wait_release:
    ;    mov ax, 03       ; Check mouse status
    ;    int 33h
    ;    test bl, 1       ; If left button still pressed
    ;    jnz wait_release  

ret
mouse_clicked endp

draw_gameGrass proc
	
	call ClearRegisters
	
	; Grass
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 30
	mov xf, 42
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 45
	mov xf, 57
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 130
	mov xf, 142
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 230
	mov xf, 242
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 276
	mov xf, 288
	
	call draw
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 290
	mov xf, 302
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 145
	mov xf, 157
	
	call draw
	
	mov si, offset Grass	;draw 
	mov yi, 159
	mov yf, 168
	mov xi, 160
	mov xf, 172
	
	call draw
	
	
	

ret
draw_gameGrass endp

gameBackground proc

	call ClearRegisters
	
	;mov ah, 06
	;mov bh, game_bgColor
	;mov cx, 0
	;mov dl, 80
	;mov dh, 80
	;int 10h
			
	
	; Sky
	mov ah, 06
	mov bh, 11
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	; Ground
	mov ah, 06
	mov bh, 02
	mov cl, 00
	mov ch, 21
	mov dl, 80
	mov dh, 25
	int 10h
	
	; Trees
	call draw_gameTree
	
	; Grass
	call draw_gameGrass
	

ret
gameBackground endp

draw_cursor proc

	mov ax, cursor_y
	
	; Grass
	;mov si, offset cursor	;draw 
	mov yi, ax
	mov yf, ax
	add yf, 10

	mov ax, cursor_x
	
	mov xi, ax
	mov xf, ax
	add xf, 10
	
	call draw
ret
draw_cursor endp

initializeGame proc
	
	mov si, offset hide_duck
	call makeBall
	
	;mov xPos, 30
	;mov yPos, 30
	call get_random_coordinates
	
	mov score, 0
	mov lives, 3
	mov ducks_passed, 3
	mov level_flag, 1
	
	mov ceiling, 250
	
	mov xDirection, 1
	mov yDirection, 1
		
	; initialize position
	mov cursor_y, 80
	mov cursor_x, 150
	mov collisions, 0
	
	mov bullets, 3
	
	; Initialize the mouse
    ;mov ax, 0       ; AX=0 initializes the mouse
    ;int 33h         ; Interrupt to call mouse driver
	
	; Creates Cursor
	;mov ax,01
	;int 33h
	
	call display_level1
	call display_round1
	call gameBackground

ret
initializeGame endp

set_gameStats proc
	
	; Score 
	mov ah,02h
	mov dh, 23
	mov dl, 1
	int 10h
	lea dx, score_prompt
	mov ah, 09h
	int 21h
	
	; Score points
	mov ah,02h
	mov dh, 23
	mov dl, 8
	int 10h
	mov dx, score
	add dl, '0'
	mov ah, 02h
	int 21h
	
	
	; lives
	mov ah,02h
	mov dh, 23
	mov dl, 15
	int 10h
	lea dx, lives_prompt
	mov ah, 09h
	int 21h
	
	; Lives Left
	mov ah,02h
	mov dh, 23
	mov dl, 22
	int 10h
	;mov dx, ducks_passed
	mov dx, lives
	add dl, '0'
	mov ah, 02h
	int 21h
	
	
	; Bullets
	mov ah,02h
	mov dh, 23
	mov dl, 29
	int 10h
	lea dx, bullets_prompt
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 23
	mov dl, 38
	int 10h
	
	mov dx, bullets
	add dx, '0'
	mov ah, 2
	int 21h

ret
set_gameStats endp

draw_gameTree proc
	call ClearRegisters

	mov si, offset Tree	;draw 
	mov yi, 128
	mov yf, 168
	mov xi, 50
	mov xf, 77
	
	call draw
	
	mov si, offset Tree	;draw 
	mov yi, 128
	mov yf, 168
	mov xi, 250
	mov xf, 277
	
	call draw
	
	
ret
draw_gameTree endp

startGame proc
	
	call ClearRegisters	
	
	mov i, 0
	mov j, 10000
	l1:
		;call gameBackground
	
		mov cx, i
		cmp cx, j
		jae end_l1_sg
		
		call check_duck_passing
		
		mov si, offset hide_mycursor1
		call draw_cursor
		
		call InputControl
		
		mov si, offset myduck1
		call makeBall
		
		call setDirection
		
		mov ax, xDirection
		add xPos, ax
		
		mov ax, yDirection
		add yPos, ax
		
		mov si, offset Cursor
		call draw_cursor
		
		call set_gameStats
		
		; check collisions
		cmp collisions, 5
		jl continue_game4
		mov ceiling, 320
		
		continue_game4:
		
		call Delay
		inc i
		jmp l1
		
	
	end_l1_sg:

ret
startGame endp

Delay2 proc

	; Adding Time Delay
       
	mov cx, 0            ;High End
	;mov dx,  9500       ;Low End
	mov dx, 10000
	mov ah, 86H            ;Wait function
	int 15H

ret
Delay2 endp

Delay3 proc

	; Adding Time Delay
	push ax
	push bx
	push CX
	push dx
	
	mov bx, 15
	
	l1:
       
	mov cx, 0            ;High End
	;mov dx,  9500       ;Low End
	mov dx, 0FFFFh
	mov ah, 86H            ;Wait function
	int 15H
	
	dec bx
		
	cmp bx, 0
	ja l1 
	
	pop dx
	pop cx
	pop bx
	pop ax

ret
Delay3 endp

Delay4 proc

	; Adding Time Delay
       
	mov cx, 0            ;High End
	;mov dx,  9500       ;Low End
	mov dx, 8000
	mov ah, 86H            ;Wait function
	int 15H

ret
Delay4 endp

Delay5 proc

	; Adding Time Delay
       
	mov cx, 0            ;High End
	;mov dx,  9500       ;Low End
	mov dx, 2000
	mov ah, 86H            ;Wait function
	int 15H

ret
Delay5 endp


InputControl proc
	push ax
	
	mov ax, 0
	mov ah, 01h
	int 16h
	;jz next_input
	jz exit_inputcontrol
	
	mov ah, 00h
	int 16h
	
	cmp al, 27
	jne next_input
	call PauseMenu
	call OptionSelected2
	
	next_input:
	;mov ax, 03       ; Get mouse status
	;int 33h
	;test bl, 1       ; Check if left button is pressed
	;jz exit_inputcontrol
	;call mouse_clicked
	;call check_hit
	
	; remove previous cursor
	;mov si, offset hide_mycursor1
	;call draw_cursor
	
	; movement speed
	mov cx, 10
	
	cmp ah, 48h
	jne next_input2
	sub cursor_y, cx
	jmp exit_inputcontrol
	
	next_input2:
	
	cmp ah, 50h
	jne next_input3
	add cursor_y, cx
	jmp exit_inputcontrol
	
	next_input3:
	cmp ah, 4Dh
	jne next_input4
	add cursor_x, cx
	jmp exit_inputcontrol
	
	next_input4:
	cmp ah, 4Bh
	jne next_input5	
	sub cursor_x, cx
	jmp exit_inputcontrol
	
	next_input5:
	cmp al, 32
	jne exit_inputcontrol
	dec bullets	
	call check_hit2
	
	
	
	
	exit_inputcontrol:
	pop ax
ret
InputControl endp

InputControl2 proc
	push ax
	
	mov ax, 0
	mov ah, 01h
	int 16h
	;jz next_input
	jz exit_inputcontrol
	
	mov ah, 00h
	int 16h
	
	cmp al, 27
	jne next_input
	call PauseMenu2
	call OptionSelected5
	
	next_input:
	
	; movement speed
	mov cx, 10
	
	cmp ah, 48h
	jne next_input2
	sub cursor_y, cx
	jmp exit_inputcontrol
	
	next_input2:
	
	cmp ah, 50h
	jne next_input3
	add cursor_y, cx
	jmp exit_inputcontrol
	
	next_input3:
	cmp ah, 4Dh
	jne next_input4
	add cursor_x, cx
	jmp exit_inputcontrol
	
	next_input4:
	cmp ah, 4Bh
	jne next_input5	
	sub cursor_x, cx
	jmp exit_inputcontrol
	
	next_input5:
	cmp al, 32
	jne exit_inputcontrol
	dec bullets	
	call check_hit3
	
	
	
	
	exit_inputcontrol:
	pop ax
ret
InputControl2 endp

InputControl3 proc
	push ax
	
	mov ax, 0
	mov ah, 01h
	int 16h
	;jz next_input
	jz exit_inputcontrol
	
	mov ah, 00h
	int 16h
	
	cmp al, 27
	jne next_input
	call PauseMenu3
	call OptionSelected10
	
	next_input:
	
	; movement speed
	mov cx, 10
	
	cmp ah, 48h
	jne next_input2
	sub cursor_y, cx
	jmp exit_inputcontrol
	
	next_input2:
	
	cmp ah, 50h
	jne next_input3
	add cursor_y, cx
	jmp exit_inputcontrol
	
	next_input3:
	cmp ah, 4Dh
	jne next_input4
	add cursor_x, cx
	jmp exit_inputcontrol
	
	next_input4:
	cmp ah, 4Bh
	jne next_input5	
	sub cursor_x, cx
	jmp exit_inputcontrol
	
	next_input5:
	cmp al, 32
	jne exit_inputcontrol
	dec bullets	
	call check_hit4
	
	
	
	
	exit_inputcontrol:
	pop ax
ret
InputControl3 endp


Pausemenu proc
	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	;call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 13
	int 10h
	lea dx, pause_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 10
	mov dl, 10
	int 10h
	lea dx, Option2
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 12
	mov dl, 10
	int 10h
	lea dx, Option6
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h
	
	mov Decision, 1
	call Selection2
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 3
		mov Decision,al
		.endif
		call Selection2
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 4)
			mov al, 1
			mov Decision, al
			.endif
			call Selection2
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
ret
PauseMenu endp

Pausemenu2 proc
	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	;call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 13
	int 10h
	lea dx, pause_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 10
	mov dl, 10
	int 10h
	lea dx, Option2
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 12
	mov dl, 10
	int 10h
	lea dx, Option6
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h
	
	mov Decision, 1
	call Selection2
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 3
		mov Decision,al
		.endif
		call Selection2
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 4)
			mov al, 1
			mov Decision, al
			.endif
			call Selection2
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
ret
PauseMenu2 endp

Pausemenu3 proc
	; mov bgColor, 0B8h
	
	call BackgroundColor
	call TitleBar
	call ClearRegisters
	;call DisplayUserName
	call draw_MenuGraphics
	
	
	mov ah, 02h
	mov dh, 2
	mov dl, 13
	int 10h
	lea dx, pause_prompt
	mov ah, 09h
	int 21h
	
	
	mov ah, 02h
	mov dh, 10
	mov dl, 10
	int 10h
	lea dx, Option2
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 12
	mov dl, 10
	int 10h
	lea dx, Option6
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, Option5
	mov ah, 09h
	int 21h
	
	mov Decision, 1
	call Selection2
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 3
		mov Decision,al
		.endif
		call Selection2
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 4)
			mov al, 1
			mov Decision, al
			.endif
			call Selection2
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters
	
ret
PauseMenu3 endp


menu_background proc

	call ClearRegisters
	
	mov ah, 06
	mov bh, 06
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h
	
	call TitleBar

ret
menu_background endp

draw proc

	call ClearRegisters

	mov ah,0ch
	mov dx, yi		; y coordinate initial( up down)
y:
	mov cx, xi		;x coordinate initial (left right)
x:
	mov al,[si]			; start array
	int 10h
	inc si				; increment full row  (x axis)
	inc cx
	cmp cx, xf		; x coordinate final( left right)
	jb x
	inc dx				; jump to next row
	cmp dx, yf		; y coordinate final( up down)
	jb y

ret
draw endp

Delay proc
	push ax
	push bx
	push cx
	push dx
	
	cmp Level, 1
	jne Level2
	
	Level1:
	mov cx, 0FFFFh
	L1: Loop L1	
	jmp DelayExit
	
	cmp Level, 2
	jne Level3
	
	Level2:
	mov cx, 0CFFFh
	L2: Loop L2	
	jmp DelayExit
	
	Level3:
	mov cx, 05FFFh
	L3: Loop L3
	
	DelayExit:
	pop dx
	pop cx
	pop bx
	pop ax
ret
Delay endp

setDirection proc
		
	mov ax, xi
	;mov ax, xPos
	;cmp ax, 250
	cmp ax, ceiling
	ja rev_x
		
	cmp ax, 20
	jb rev_x
	
	mov ax, yi
	;mov ax, yPos
	;cmp ax, 140
	;cmp ax, ceiling
	cmp ax, 100
	ja rev_y
	
	cmp ax, 15
	jb rev_y
	
	jmp makeBall_exit

	
	rev_x:
		neg xDirection
		inc collisions
		jmp makeBall_exit
		
		
	rev_y:
		neg yDirection
		inc collisions
		
	
	
	makeBall_exit:
	

ret
setDirection endp

setDirection2 proc
		
	;mov ax, xi2
	mov ax, xPos2
	;cmp ax, 250
	cmp ax, ceiling
	ja rev_x
		
	cmp ax, 20
	jb rev_x
	
	;mov ax, yi2
	mov ax, yPos2
	;cmp ax, 140
	;cmp ax, ceiling
	cmp ax, 100
	ja rev_y
	
	cmp ax, 15
	jb rev_y
	
	jmp makeBall_exit

	
	rev_x:
		neg xDirection2
		inc collisions
		jmp makeBall_exit
		
		
	rev_y:
		neg yDirection2
		inc collisions
		
	
	makeBall_exit:
	

ret
setDirection2 endp


makeBall proc
	
	call ClearRegisters
	
	;mov ax, xDirection
	;mov bx, yDirection
	mov cx, xPos
	mov dx, yPos

	;mov si, offset duck	;draw 
	mov yi, dx
	add yi, bx
	mov yf, dx
	;add yf, 6
	;add yf, 33
	;add yf, 19
	add yf, 25
	add yf, bx
	
	mov xi, cx
	add xi, ax	
	mov xf, cx
	;add xf, 9
	;add xf, 33
	;add xf, 19
	add xf, 25
	add xf, ax
	
	call draw

ret
makeBall endp

makeBall2 proc
	
	;call ClearRegisters
	

	mov yi, dx
	;add yi, bx
	mov yf, dx
	;add yf, 6
	;add yf, 33
	;add yf, 19
	add yf, 25
	;add yf, bx
	
	mov xi, cx
	;add xi, ax	
	mov xf, cx
	;add xf, 9
	;add xf, 33
	;add xf, 19
	add xf, 25
	;add xf, ax
	
	call draw

ret
makeBall2 endp


ClearRegisters proc

	mov ax, 0
	mov bx, 0
	mov cx, 0
	mov dx, 0

ret
ClearRegisters endp


BackgroundColor proc

	call ClearRegisters
	
	mov ah, 06
	;mov bh, bgColor
	mov bh, 0
	mov cx, 0
	mov dl, 80
	mov dh, 80
	int 10h

		
ret
BackgroundColor endp

draw_TitleGraphics proc

	; duck
	mov si, offset myduck2	;draw 
	mov yi, 130
	mov yf, 163
	mov xi, 230
	mov xf, 263
	
	call draw

ret
draw_TitleGraphics endp

TitleBar proc
		
	call ClearRegisters
	
	mov ah, 06
	mov bh, BarColor
	mov bh, 08h
	;mov cx, 0
	mov dl, 80
	mov dh, 4
	int 10h

ret
TitleBar endp

clearUsername proc
	
	push cx
	push si
	push ax
	
	mov si, offset UserName
	mov cx, 9
	mov ax, '$'
	
	cln_loop1:
		mov [si], ax
		inc si		
		loop cln_loop1
	
	pop ax
	pop si
	pop cx
	
ret
clearUsername endp

TitlePage proc

	call BackgroundColor
	call TitleBar
	call clearUsername
	call draw_TitleGraphics
	call ClearRegisters
	
	mov user_exits, 0
	
	mov ah,02h
	mov dh, 2
	mov dl, 7
	int 10h
	lea dx, Welcome
	mov ah, 09h
	int 21h

	
	mov ah,02h
	mov dh, 7
	mov dl, 10
	int 10h
	lea dx, DevelopedBy
	mov ah, 09h
	int 21h
	
	
	mov ah,02h
	mov dh, 12
	mov dl, 4
	int 10h
	lea si,EnterNamePrompt
	mov bl,12
	mov bh,4
	mov cx,17
	mov color,0EH
	CALL PrintColoredString
	;lea dx, EnterNamePrompt
	;mov ah, 09h
	;int 21h
	mov bx, 0
	
	mov si, offset UserName
	StayInMenuScreen:
		mov ah, 00h
		int 16h
		cmp al, 13
		je EndTitleScreen
		
		mov [si],al
		mov ah, 02h
		mov bx, 00h
		mov dh, 12
		mov dl, 23
		int 10h
		
		lea dx, UserName
		mov ah, 09h
		int 21h
		
		inc si
	jmp StayInMenuScreen
	
	EndTitleScreen:
	
	.if (Username[0] == '$')
		mov Username[0], 'P'
		mov Username[1], 'l'
		mov Username[2], 'a'
		mov Username[3], 'y'
		mov Username[4], 'e'
		mov Username[5], 'r'
	.endif
	
	call find_user
	
	.if (user_exits == 0)	
		call ClearRegisters
		call get_userScore_buffer
	.endif
	
ret
TitlePage endp

DisplayUserName proc
	
	; Set cursor position
	mov ah, 02h
	mov dh, 2
	mov dl, 15
	int 10h
	; Print String
	lea dx, UserName
	mov ah, 09h
	int 21h


ret
DisplayUserName endp

draw_MenuGraphics proc
	
	call ClearRegisters

	mov si, offset MenuGraphics	;draw 
	mov yi, 100
	mov yf, 127
	mov xi, 230
	mov xf, 257
	
	call draw

ret
draw_MenuGraphics endp

MenuScreen proc

	call hide_cursor
	call BackgroundColor
	;call TitleBar
	call ClearRegisters
	call DisplayUserName
	call draw_MenuGraphics
	
	call DrawGameLogo
	
	mov ah, 02h
	mov dh, 2
	mov dl, 7
	int 10h
	lea dx, greet_user
	mov ah, 09h
	int 21h
	;lea si,greet_user
	;mov bl,2
	;mov bh,7
	;mov cx,8
	;mov color,0EH
	;CALL PrintColoredString
	;call ClearRegisters
	
	;mov ah, 02h
	;mov dh, 7
	;mov dl, 7
	;int 10h
	;lea dx, GameName
	;mov ah, 09h
	;int 21h
	
	mov ah, 02h
	mov dh, 10
	mov dl, 10
	int 10h
	lea dx, Option1
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 12
	mov dl, 10
	int 10h
	lea dx, Option7
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 14
	mov dl, 10
	int 10h
	lea dx, Option3
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 16
	mov dl, 10
	int 10h
	lea dx, Option4
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 18
	mov dl, 10
	int 10h
	;lea dx, Option8
	lea dx, user_highscore_prompt
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 20
	mov dl, 10
	int 10h
	;lea dx, Option5
	lea dx, Option8
	mov ah, 09h
	int 21h
	
	mov ah, 02h
	mov dh, 22
	mov dl, 10
	int 10h
	;lea dx, user_highscore_prompt
	lea dx, Option5
	mov ah, 09h
	int 21h
	
	call Selection
	
	StayInMenuScreen:
		call ClearRegisters
		mov ah, 00h
		int 16h
	
		cmp ah, 48H
		jne next1
		sub Decision, 1	
		.if (Decision == 0)
		mov al, 7
		mov Decision,al
		.endif
		call Selection
		
		next1:
			cmp ah, 50H
			jne next2
			add Decision, 1
			.if (Decision == 8)
			mov al, 1
			mov Decision, al
			.endif
			call Selection
		
		next2:
	cmp al, 13
	je ExitMenuScreen
	jmp StayInMenuScreen

	ExitMenuScreen:
	call ClearRegisters

ret
MenuScreen endp

Selection proc

	mov ah,02h
	mov dh, 10
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov ah,02h
	mov dh, 12
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 14
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 16
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 20
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 22
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov bl, Decision
	mov ah, 02h

	mov dl, 5
	.if (bl==1)
	mov dh, 10
	.elseif (bl==2)
	mov dh, 12
	.elseif (bl==3)
	mov dh, 14
	.elseif (bl==4)
	mov dh, 16
	.elseif (bl==5)
	mov dh, 18
	.elseif (bl==6)
	mov dh, 20
	.elseif (bl==7)
	mov dh, 22
	.endif
	
	int 10h
	lea dx, Fou
	mov ah, 09h
	int 21h
	call ClearRegisters
ret
Selection endp

Selection2 proc

	mov ah,02h
	mov dh, 10
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov ah,02h
	mov dh, 12
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 14
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov bl, Decision
	mov ah, 02h

	mov dl, 5
	.if (bl==1)
	mov dh, 10
	.elseif (bl==2)
	mov dh, 12
	.elseif (bl==3)
	mov dh, 14
	.endif
	
	int 10h
	lea dx, Fou
	mov ah, 09h
	int 21h
	call ClearRegisters
	
ret
Selection2 endp

Selection3 proc

	mov ah,02h
	mov dh, 14
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov ah,02h
	mov dh, 16
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	

	mov bl, Decision
	mov ah, 02h

	mov dl, 5
	.if (bl==1)
	mov dh, 14
	.elseif (bl==2)
	mov dh, 16
	.endif
	
	int 10h
	lea dx, Fou
	mov ah, 09h
	int 21h
	call ClearRegisters
	
ret
Selection3 endp

Selection4 proc

	mov ah,02h
	mov dh, 14
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov ah,02h
	mov dh, 16
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	

	mov bl, Decision
	mov ah, 02h

	mov dl, 5
	.if (bl==1)
	mov dh, 14
	.elseif (bl==2)
	mov dh, 16
	.elseif (bl==3)
	mov dh, 18
	.endif
	
	int 10h
	lea dx, Fou
	mov ah, 09h
	int 21h
	call ClearRegisters
	
ret
Selection4 endp

Selection5 proc

	mov ah,02h
	mov dh, 14
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h

	mov ah,02h
	mov dh, 16
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 18
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	
	mov ah,02h
	mov dh, 20
	mov dl, 5
	int 10h
	lea dx, Fin
	mov ah, 09h
	int 21h
	

	mov bl, Decision
	mov ah, 02h

	mov dl, 5
	.if (bl==1)
	mov dh, 14
	.elseif (bl==2)
	mov dh, 16
	.elseif (bl==3)
	mov dh, 18
	.elseif (bl==4)
	mov dh, 20
	.endif
	
	int 10h
	lea dx, Fou
	mov ah, 09h
	int 21h
	call ClearRegisters
	
ret
Selection5 endp


ClearStack proc
	pop RetStore
	
	.while(sp != InitialStack)
		pop di
	.endw
	
	push RetStore
ret
ClearStack endp

GameStartup proc
	mov Lives, 4
	mov Level, 0
	mov Score, 0
	mov BarColor, 6Dh
ret
GameStartup endp

OptionSelected proc
	.if(Decision == 1)
		mov Decision, 0
		call ClearStack
		call GameStartup
		jmp Reset
	.elseif(Decision == 2)
		;call ClearStack
		;mov Score, 0
		;call LevelScreen
		mov Decision, 0
		call ClearStack
		call GameStartup
		call selectLevel_page
		jmp Setup
		;jmp Reset2
	.elseif(Decision == 3)
		call instructions_page
		jmp Setup
	.elseif(Decision == 4)
		call highscore_page
		jmp Setup
	.elseif(Decision == 5)
		;jmp title_page
		call user_highscore_page
		jmp Setup
	.elseif(Decision == 6)
		jmp title_page
		;pop dx
		;jmp Return
	.elseif(Decision == 7)
		pop dx
		jmp Return
		;call user_highscore_page
		;jmp Setup
	.endif
ret
OptionSelected endp

OptionSelected2 proc

	.if(Decision == 1)
		call gameBackground
		jmp end_os2
	.elseif(Decision == 2)
		jmp Reset
	.elseif(Decision == 3)
		pop dx
		jmp SetUp
	.endif
	
	end_os2:
ret
OptionSelected2 endp

OptionSelected3 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset
	.elseif(Decision == 2)
		pop dx
		jmp SetUp
	.endif
	
	end_os3:
ret
OptionSelected3 endp

OptionSelected4 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset
	.elseif(Decision == 2)
		call gameBackground
		jmp Reset2
	.elseif(Decision == 3)
		pop dx
		jmp SetUp
	.endif
	
	end_os4:
ret
OptionSelected4 endp

OptionSelected5 proc

	.if(Decision == 1)
		call gameBackground
		jmp end_os2
	.elseif(Decision == 2)
		jmp Reset2
	.elseif(Decision == 3)
		pop dx
		jmp SetUp
	.endif
	
	end_os2:
ret
OptionSelected5 endp

OptionSelected6 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset2
	.elseif(Decision == 2)
		pop dx
		jmp SetUp
	.endif
	
	end_os3:
ret
OptionSelected6 endp

OptionSelected7 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset2
	.elseif(Decision == 2)
		call gameBackground
		jmp Reset3
	.elseif(Decision == 3)
		pop dx
		jmp SetUp
	.endif
	
	end_os4:
ret
OptionSelected7 endp

OptionSelected8 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset
	.elseif(Decision == 2)
		call gameBackground
		jmp Reset2
	.elseif(Decision == 3)
		call gameBackground
		jmp Reset3
	.elseif(Decision == 4)
		pop dx
		jmp SetUp	
	.endif
	
	end_os4:
ret
OptionSelected8 endp

OptionSelected9 proc

	.if(Decision == 1)
		call gameBackground
		jmp Reset3
	.elseif(Decision == 2)
		pop dx
		jmp SetUp
	.endif
	
	end_os3:
ret
OptionSelected9 endp

OptionSelected10 proc

	.if(Decision == 1)
		call gameBackground
		jmp end_os2
	.elseif(Decision == 2)
		jmp Reset3
	.elseif(Decision == 3)
		pop dx
		jmp SetUp
	.endif
	
	end_os2:
ret
OptionSelected10 endp


PrintColoredString proc

	printloop: 
		push cx
		
		mov  ah, 02h	  ;SetCursorPosition
		mov  dh, bl		  ;Row num
		mov  dl, bh		  ;Col num
		push bx
		mov  bh, 0    	  ;Display page
		int  10h

		mov al,[si]
		inc si
	
		mov  ah, 09h  ;Teletype
		mov cx,1
		mov  bl, color
		int  10h
	
		pop bx
		inc bh
		pop cx
	loop printloop
	
	RET
PrintColoredString ENDP


DrawGameLogo  PROC

	
	mov si, offset D_Logo	; D
	mov yi, 40
	mov yf, 63
	mov xi, 45
	mov xf, 68 
	call draw
	
	mov si, offset U_Logo	; U
	mov yi, 40
	mov yf, 63
	mov xi, 70
	mov xf, 93 
	call draw
	
	mov si, offset C_Logo	; C
	mov yi, 40
	mov yf, 63
	mov xi, 95
	mov xf, 118 
	call draw
	
	mov si, offset K_Logo	; K
	mov yi, 40
	mov yf, 63
	mov xi, 120
	mov xf, 143 
	call draw
	
	mov si, offset S_Logo	; S
	mov yi, 40
	mov yf, 63
	mov xi, 145
	mov xf, 168 
	call draw
	
	mov si, offset H_Logo	; H
	mov yi, 40
	mov yf, 63
	mov xi, 170
	mov xf, 193
	call draw
	
	mov si, offset O_Logo	; O
	mov yi, 40
	mov yf, 63
	mov xi, 195
	mov xf, 218 
	call draw
	
	mov si, offset O_Logo	; O
	mov yi, 40
	mov yf, 63
	mov xi, 220
	mov xf, 243 
	call draw
	
	mov si, offset T_Logo	; T
	mov yi, 40
	mov yf, 63
	mov xi, 245
	mov xf, 268 
	call draw

ret
DrawGameLogo  ENDP



end





